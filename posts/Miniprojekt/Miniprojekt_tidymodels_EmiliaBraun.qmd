---
title: "Miniprojekt tidymodels"
author: "Emilia Braun"
date: "2023-11-28"
categories: [Textanalyse, Tidymodels, Klassifikation]
---

Textanalyse zur Klassifikation von Hatespeech

```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(easystats)
library(tidymodels)
library(tidytext)  
library(textrecipes)  
library(lsa)  
library(discrim)  
library(naivebayes)
library(tictoc)  
library(fastrtext)  
library(remoji)  
library(tokenizers)  
library(syuzhet)
library(pradadata)
library(beepr)
library(quanteda.textstats)
library(ggthemes)
```

# Daten laden

```{r}
data("germeval_train", package = "pradadata")
data("germeval_test", package = "pradadata")

data("schimpfwoerter")
schimpfwoerter$value <- 1
```

# Daten visualisieren

## Textlänge in Abhängigkeit von c2 Kategorie

```{r}
train1 <-
  germeval_train |> 
  mutate(text_length = str_length(text))

ggplot(train1, aes(x = c1, y = text_length, color = c2)) +
  geom_point() +
  labs(title = "Germeval 2018 Datensatz Visualisierung",
       x = "c1",
       y = "Textlänge",
       color = "c2") +
  scale_color_tableau("Nuriel Stone")
```

## Histogramm der Textlänge

```{r}
ggplot(train1, aes(x = text_length)) +
  geom_histogram(binwidth = 5, fill = "#94d0c0", color = "white") +
  labs(title = "Histogramm der Textlängen", x = "Textlänge", y = "Häufigkeit")

```

## Boxplot für verschiedene Kateforien

```{r}
ggplot(train1, aes(x = c1, y = text_length, fill = c2)) +
  geom_boxplot() +
  labs(title = "Boxplot der Textlängen nach c1", x = "c1", y = "Textlänge", fill = "c2")+
  scale_fill_tableau("Nuriel Stone")

```

# Workflow aufstellen

## Model & Folds

```{r}
# model:
mod1 <-
  rand_forest(mode = "classification")


# cv:
set.seed(42)
rsmpl <- vfold_cv(germeval_train, v = 5)
```

## recipe:

### rec 1

```{r}

d_train <-
  germeval_train |> 
  select(id, c1, text)


rec1 <-
  recipe(c1 ~ ., data = d_train) |> 
  update_role(id, new_role = "id")  |> 
  update_role(text, new_role = "ignore") |> 
  step_mutate(n_schimpf = get_sentiment(text,  # aus `syuzhet`
                                    method = "custom",
                                    lexicon = schimpfwoerter)) |> 
  step_mutate(n_emo = get_sentiment(text,  # aus `syuzhet`
                                    method = "custom",
                                    lexicon = sentiws))  |>
  step_tokenize(text) %>%
  step_stopwords(text, keep = FALSE) 

rec1_prepped <- prep(rec1)

d_rec1 <- bake(rec1_prepped, new_data = NULL)

head(d_rec1)
```

### rec2

```{r}
rec2 <-
  recipe(c1 ~ ., data = d_train) |> 
  update_role(id, new_role = "id")  |> 
  update_role(text, new_role = "ignore") |> 
  step_mutate(n_schimpf = get_sentiment(text,  # aus `syuzhet`
                                    method = "custom",
                                    lexicon = schimpfwoerter)) |> 
  step_mutate(n_emo = get_sentiment(text,  # aus `syuzhet`
                                    method = "custom",
                                    lexicon = sentiws))  |> 
  step_tokenize(text) %>%
  step_stopwords(text, keep = FALSE) |> 
  step_tokenfilter(text, max_tokens = 1e3) |> 
  step_tfidf(text) 



rec2_prepped <- prep(rec2)

d_rec2 <- bake(rec2_prepped, new_data = NULL)

head(d_rec2)
```

## workflow:

### wf1

```{r}

wf1 <-
  workflow() %>% 
  add_model(mod1) %>% 
  add_recipe(rec1)
```

### wf2

```{r}
wf2 <-
  workflow() %>% 
  add_model(mod1) %>% 
  add_recipe(rec2)
```

# Fit

## Fit1

```{r}
tic()
fit1 <-
  fit(wf1,
      data = germeval_train)
toc()
beep(3)
```

## Fit 2

```{r}
tic()
fit2 <-
  fit(wf2,
      data = germeval_train)
toc()
beep(3)
```

# Vorhersagen

## pred1

```{r}
tic()
preds <-
  predict(fit1, new_data = germeval_test)
toc()
```

## pred2

```{r}
tic()
preds2 <-
  predict(fit2, new_data = germeval_test)
toc()
```

```{r}
d_test <-
  germeval_test |> 
  bind_cols(preds) |> 
  mutate(c1 = as.factor(c1))

d_test2 <-
  germeval_test |> 
  bind_cols(preds2) |> 
  mutate(c1 = as.factor(c1))
```

```{r}
my_metrics <- metric_set(accuracy, f_meas)
my_metrics(d_test,
           truth = c1,
           estimate = .pred_class)

my_metrics <- metric_set(accuracy, f_meas)
my_metrics(d_test2,
           truth = c1,
           estimate = .pred_class)
```
